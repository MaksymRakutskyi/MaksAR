@using WebDataBaseEDU.Data

<tr>
    <td>@CurrentUser.Id</td>
    <td>@CurrentUser.Name</td>
    <td>@CurrentUser.Surname</td>
    <td>@CurrentUser.Age</td>
    <td>@CurrentUser.Description</td>
    <td>@CurrentUser.IsActive</td>
    <td>@CurrentUser.Role</td>
    <td>
        <button @onclick="ShowUserEdit" class="btn btn-success">Edit</button>
        <button @onclick="ShowUserDelete" class="btn btn-danger"><span class="oi oi-trash"></span></button>
    </td>
</tr>

@code {

    [Parameter] public User CurrentUser { get; set; }
    
    [Parameter] public EventCallback<User> OnClickDeleteUser { get; set; }
    
    [Parameter] public EventCallback<User> OnClickEditUser { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    async Task ShowUserEdit()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UserEdit.SomeUserToEdit), CurrentUser);

        var messageForm = Modal.Show<UserEdit>($"Edit User №{CurrentUser.Id}", parameters);
        var result = await messageForm.Result;
        
        if (!result.Cancelled)
        {
            await OnClickEditUser.InvokeAsync(CurrentUser);
        }
        
    }
    
    async Task ShowUserDelete()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UserDelete.SomeUserToDelete), CurrentUser);

        var messageForm = Modal.Show<UserDelete>($"Delete User №{CurrentUser.Id} ?", parameters);
        var result = await messageForm.Result;

        if (!result.Cancelled)
        {
            await OnClickDeleteUser.InvokeAsync(CurrentUser);
        }
        
    }
    
    
    
}
